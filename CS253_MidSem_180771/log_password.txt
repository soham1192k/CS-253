For this purpose, I wrote a script, called "crack.sh"

To generate the password, I used brute force.
Since I knew that only 2 of the characters out of 180771 would be a letter,
I iterated over which two characters could be letters.

Lets say the first characters that is a letter is 'i'.
I fixed 'i' and then iterated from i+1 to 5, to fix some 'j' which would be another
letter.
Then I changed the ith and jth indices of the array (1 8 0 7 7 1).
This gave me a array which might be correct or incorrect.
I stored this in a string. To do that I simply concatenated all the array values
from indices 0 to 5.

I also took care to reset the array to (1 8 0 7 7 1), Since it would have
changed after every iteration. 

Then I ran the executable as was mentioned in the paper.
./zipfilegen.out 180771 $pword  
Here $pword was the temporary password found at this current step.

Now there was two possibilities. The password could be correct, and incorrect.
If it was incorrect, the terminal output was Wrong Password.
I checked the exit code for this case using echo $?
Turned out that this exit code was non-zero, implying the last executed command had not run properly.

So all I had to do was to check if the exit code was non zero or 0.

If the exit code was 0, I had got my correct password, and I could break.